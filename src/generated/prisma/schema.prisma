generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model APPLICATION {
  application_id    Int                 @id @default(autoincrement())
  student_id        Int?
  scholarship_id    Int?
  submission_date   DateTime?           @db.Date
  status            APPLICATION_status? @default(pending)
  total_points      Int?
  reviewer_comments String?             @db.Text
  review_date       DateTime?           @db.Date
  STUDENT           STUDENT?            @relation(fields: [student_id], references: [student_id], onDelete: NoAction, onUpdate: NoAction, map: "application_ibfk_1")
  SCHOLARSHIP       SCHOLARSHIP?        @relation(fields: [scholarship_id], references: [scholarship_id], onDelete: NoAction, onUpdate: NoAction, map: "application_ibfk_2")
  COMMITTEE_REVIEW  COMMITTEE_REVIEW[]
  DOCUMENT          DOCUMENT[]
  PAYMENT           PAYMENT[]

  @@index([scholarship_id], map: "scholarship_id")
  @@index([student_id], map: "student_id")
}

model COMMITTEE_REVIEW {
  review_id      Int                      @id @default(autoincrement())
  application_id Int?
  reviewer_id    Int?
  review_date    DateTime?                @db.Date
  points_awarded Int?
  comments       String?                  @db.Text
  status         COMMITTEE_REVIEW_status? @default(unread)
  is_read        Boolean?                 @default(false)
  APPLICATION    APPLICATION?             @relation(fields: [application_id], references: [application_id], onDelete: NoAction, onUpdate: NoAction, map: "committee_review_ibfk_1")
  USER           USER?                    @relation(fields: [reviewer_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "committee_review_ibfk_2")

  @@index([application_id], map: "application_id")
  @@index([reviewer_id], map: "reviewer_id")
}

model DOCUMENT {
  document_id         Int                           @id @default(autoincrement())
  application_id      Int?
  document_type       String?                       @db.VarChar(50)
  file_name           String?                       @db.VarChar(255)
  file_path           String?                       @db.Text
  upload_date         DateTime?                     @db.Date
  verification_status DOCUMENT_verification_status? @default(pending)
  APPLICATION         APPLICATION?                  @relation(fields: [application_id], references: [application_id], onDelete: NoAction, onUpdate: NoAction, map: "document_ibfk_1")

  @@index([application_id], map: "application_id")
}

model ELIGIBILITY_CRITERIA {
  criteria_id          Int          @id @default(autoincrement())
  scholarship_id       Int?
  criteria_name        String?      @db.VarChar(100)
  criteria_description String?      @db.Text
  min_value            Decimal?     @db.Decimal(10, 2)
  max_value            Decimal?     @db.Decimal(10, 2)
  weight               Int?
  SCHOLARSHIP          SCHOLARSHIP? @relation(fields: [scholarship_id], references: [scholarship_id], onDelete: NoAction, onUpdate: NoAction, map: "eligibility_criteria_ibfk_1")

  @@index([scholarship_id], map: "scholarship_id")
}

model FAMILY_MEMBER {
  member_id         Int                 @id @default(autoincrement())
  student_id        Int?
  full_name         String?             @db.VarChar(150)
  age               Int?
  relationship      String?             @db.VarChar(50)
  designation       String?             @db.VarChar(100)
  annual_income     Decimal?            @db.Decimal(10, 2)
  workplace         String?             @db.VarChar(150)
  phone_number      String?             @db.VarChar(20)
  STUDENT           STUDENT?            @relation(fields: [student_id], references: [student_id], onDelete: NoAction, onUpdate: NoAction, map: "family_member_ibfk_1")
  SIBLING_EDUCATION SIBLING_EDUCATION[]

  @@index([student_id], map: "student_id")
}

model NOTIFICATION {
  notification_id Int       @id @default(autoincrement())
  user_id         Int?
  message         String?   @db.Text
  created_at      DateTime? @default(now()) @db.Timestamp(0)
  is_read         Boolean?  @default(false)
  USER            USER?     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "notification_ibfk_1")

  @@index([user_id], map: "user_id")
}

model OTHER_FUNDING {
  funding_id    Int       @id @default(autoincrement())
  student_id    Int?
  funding_name  String?   @db.VarChar(100)
  organization  String?   @db.VarChar(150)
  annual_amount Decimal?  @db.Decimal(10, 2)
  start_date    DateTime? @db.Date
  end_date      DateTime? @db.Date
  STUDENT       STUDENT?  @relation(fields: [student_id], references: [student_id], onDelete: NoAction, onUpdate: NoAction, map: "other_funding_ibfk_1")

  @@index([student_id], map: "student_id")
}

model PAYMENT {
  payment_id     Int             @id @default(autoincrement())
  application_id Int?
  amount         Decimal?        @db.Decimal(10, 2)
  payment_date   DateTime?       @db.Date
  payment_method String?         @db.VarChar(50)
  transaction_id String?         @db.VarChar(100)
  status         PAYMENT_status? @default(pending)
  APPLICATION    APPLICATION?    @relation(fields: [application_id], references: [application_id], onDelete: NoAction, onUpdate: NoAction, map: "payment_ibfk_1")

  @@index([application_id], map: "application_id")
}

model SCHOLARSHIP {
  scholarship_id       Int                    @id @default(autoincrement())
  name                 String?                @db.VarChar(150)
  description          String?                @db.Text
  amount               Decimal?               @db.Decimal(10, 2)
  no_of_students       Int?
  application_deadline DateTime?              @db.Date
  start_date           DateTime?              @db.Date
  end_date             DateTime?              @db.Date
  provider_id          Int?
  is_active            Boolean?               @default(true)
  APPLICATION          APPLICATION[]
  ELIGIBILITY_CRITERIA ELIGIBILITY_CRITERIA[]
  SCHOLARSHIP_PROVIDER SCHOLARSHIP_PROVIDER?  @relation(fields: [provider_id], references: [provider_id], onDelete: NoAction, onUpdate: NoAction, map: "scholarship_ibfk_1")

  @@index([provider_id], map: "provider_id")
}

model SCHOLARSHIP_PROVIDER {
  provider_id    Int           @id @default(autoincrement())
  name           String?       @db.VarChar(150)
  contact_person String?       @db.VarChar(100)
  phone          String?       @db.VarChar(20)
  email          String?       @db.VarChar(100)
  address        String?       @db.Text
  SCHOLARSHIP    SCHOLARSHIP[]
}

model SIBLING_EDUCATION {
  education_id        Int            @id @default(autoincrement())
  student_id          Int?
  member_id           Int?
  institution         String?        @db.VarChar(150)
  year_grade          String?        @db.VarChar(50)
  registration_course String?        @db.VarChar(100)
  STUDENT             STUDENT?       @relation(fields: [student_id], references: [student_id], onDelete: NoAction, onUpdate: NoAction, map: "sibling_education_ibfk_1")
  FAMILY_MEMBER       FAMILY_MEMBER? @relation(fields: [member_id], references: [member_id], onDelete: NoAction, onUpdate: NoAction, map: "sibling_education_ibfk_2")

  @@index([member_id], map: "member_id")
  @@index([student_id], map: "student_id")
}

model STUDENT {
  student_id         Int                 @id @default(autoincrement())
  user_id            Int?
  full_name          String?             @db.VarChar(150)
  registration_no    String?             @unique(map: "registration_no") @db.VarChar(50)
  date_of_birth      DateTime?           @db.Date
  permanent_address  String?             @db.Text
  admission_date     DateTime?           @db.Date
  year_of_study      Int?
  gender             STUDENT_gender?
  phone_number       String?             @db.VarChar(20)
  email              String?             @db.VarChar(100)
  school_name        String?             @db.VarChar(150)
  unmarried_siblings Int?
  APPLICATION        APPLICATION[]
  FAMILY_MEMBER      FAMILY_MEMBER[]
  OTHER_FUNDING      OTHER_FUNDING[]
  SIBLING_EDUCATION  SIBLING_EDUCATION[]
  USER               USER?               @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "student_ibfk_1")

  @@index([user_id], map: "user_id")
}

model USER {
  user_id          Int                @id @default(autoincrement())
  first_name       String?            @db.VarChar(100)
  last_name        String?            @db.VarChar(100)
  email            String?            @unique(map: "email") @db.VarChar(100)
  username         String?            @db.VarChar(50)
  password         String?            @db.VarChar(255)
  role             USER_role          @default(student)
  created_at       DateTime?          @default(now()) @db.Timestamp(0)
  COMMITTEE_REVIEW COMMITTEE_REVIEW[]
  NOTIFICATION     NOTIFICATION[]
  STUDENT          STUDENT[]
}

enum APPLICATION_status {
  pending
  reviewed
  approved
  rejected
}

enum COMMITTEE_REVIEW_status {
  read
  unread
}

enum DOCUMENT_verification_status {
  pending
  verified
  rejected
}

enum PAYMENT_status {
  pending
  completed
  failed
}

enum USER_role {
  student
  coordinator
  admin
}

enum STUDENT_gender {
  male
  female
  other
}
