generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  user_id    Int      @id @default(autoincrement())
  first_name String   @db.VarChar(100)
  last_name  String   @db.VarChar(100)
  email      String   @unique @db.VarChar(100)
  username   String   @db.VarChar(50)
  password   String   @db.VarChar(255)
  role       Role     @default(student)
  created_at DateTime @default(now())

  student       Student?
  reviews       CommitteeReview[]
  notifications Notification[]
}

model Student {
  student_id         Int      @id @default(autoincrement())
  user_id            Int      @unique
  full_name          String   @db.VarChar(150)
  registration_no    String   @unique @db.VarChar(50)
  date_of_birth      DateTime
  permanent_address  String
  admission_date     DateTime
  year_of_study      Int
  gender             Gender
  phone_number       String   @db.VarChar(20)
  email              String   @db.VarChar(100)
  school_name        String   @db.VarChar(150)
  unmarried_siblings Int

  user             User               @relation(fields: [user_id], references: [user_id])
  applications     Application[]
  familyMembers    FamilyMember[]
  otherFunding     OtherFunding[]
  siblingEducation SiblingEducation[]
  documents        Document[]
}

model ScholarshipProvider {
  provider_id    Int    @id @default(autoincrement())
  name           String @db.VarChar(150)
  contact_person String @db.VarChar(100)
  phone          String @db.VarChar(20)
  email          String @db.VarChar(100)
  address        String

  scholarships Scholarship[]
}

model Scholarship {
  scholarship_id       Int      @id @default(autoincrement())
  name                 String   @db.VarChar(150)
  description          String
  amount               Decimal  @db.Decimal(10, 2)
  no_of_students       Int
  application_deadline DateTime
  start_date           DateTime
  end_date             DateTime
  provider_id          Int
  is_active            Boolean  @default(true)

  provider     ScholarshipProvider   @relation(fields: [provider_id], references: [provider_id])
  criteria     EligibilityCriteria[]
  applications Application[]
}

model EligibilityCriteria {
  criteria_id          Int     @id @default(autoincrement())
  scholarship_id       Int
  criteria_name        String  @db.VarChar(100)
  criteria_description String
  min_value            Decimal @db.Decimal(10, 2)
  max_value            Decimal @db.Decimal(10, 2)
  weight               Int

  scholarship Scholarship @relation(fields: [scholarship_id], references: [scholarship_id])
}

model Application {
  application_id    Int               @id @default(autoincrement())
  student_id        Int
  scholarship_id    Int
  submission_date   DateTime
  status            ApplicationStatus @default(pending)
  total_points      Int?
  reviewer_comments String?
  review_date       DateTime?

  student     Student           @relation(fields: [student_id], references: [student_id])
  scholarship Scholarship       @relation(fields: [scholarship_id], references: [scholarship_id])
  documents   Document[]
  reviews     CommitteeReview[]
  payments    Payment[]
}

model Document {
  document_id         Int                @id @default(autoincrement())
  application_id      Int
  student_id          Int
  document_type       String             @db.VarChar(50)
  file_name           String             @db.VarChar(255)
  file_data           Bytes?             @db.MediumBlob
  upload_date         DateTime
  verification_status VerificationStatus @default(pending)

  application Application @relation(fields: [application_id], references: [application_id])
  student     Student     @relation(fields: [student_id], references: [student_id])
}

model FamilyMember {
  member_id     Int     @id @default(autoincrement())
  student_id    Int
  full_name     String  @db.VarChar(150)
  age           Int
  relationship  String  @db.VarChar(50)
  designation   String  @db.VarChar(100)
  annual_income Decimal @db.Decimal(10, 2)
  workplace     String  @db.VarChar(150)
  phone_number  String  @db.VarChar(20)

  student          Student            @relation(fields: [student_id], references: [student_id])
  siblingEducation SiblingEducation[]
}

model OtherFunding {
  funding_id    Int      @id @default(autoincrement())
  student_id    Int
  funding_name  String   @db.VarChar(100)
  organization  String   @db.VarChar(150)
  annual_amount Decimal  @db.Decimal(10, 2)
  start_date    DateTime
  end_date      DateTime

  student Student @relation(fields: [student_id], references: [student_id])
}

model CommitteeReview {
  review_id      Int          @id @default(autoincrement())
  application_id Int
  reviewer_id    Int
  review_date    DateTime
  points_awarded Int
  comments       String
  status         ReviewStatus @default(unread)
  is_read        Boolean      @default(false)

  application Application @relation(fields: [application_id], references: [application_id])
  reviewer    User        @relation(fields: [reviewer_id], references: [user_id])
}

model Payment {
  payment_id     Int           @id @default(autoincrement())
  application_id Int
  amount         Decimal       @db.Decimal(10, 2)
  payment_date   DateTime
  payment_method String        @db.VarChar(50)
  transaction_id String        @db.VarChar(100)
  status         PaymentStatus @default(pending)

  application Application @relation(fields: [application_id], references: [application_id])
}

model SiblingEducation {
  education_id        Int    @id @default(autoincrement())
  student_id          Int
  member_id           Int
  institution         String @db.VarChar(150)
  year_grade          String @db.VarChar(50)
  registration_course String @db.VarChar(100)

  student Student      @relation(fields: [student_id], references: [student_id])
  member  FamilyMember @relation(fields: [member_id], references: [member_id])
}

model Notification {
  notification_id Int      @id @default(autoincrement())
  user_id         Int
  message         String
  created_at      DateTime @default(now())
  is_read         Boolean  @default(false)

  user User @relation(fields: [user_id], references: [user_id])
}

model Setting {
  key   String @id
  value String
}

// ENUMS

enum Role {
  student
  coordinator
  admin
}

enum Gender {
  male
  female
  other
}

enum ApplicationStatus {
  pending
  reviewed
  approved
  rejected
}

enum VerificationStatus {
  pending
  verified
  rejected
}

enum ReviewStatus {
  read
  unread
}

enum PaymentStatus {
  pending
  completed
  failed
}
